name: Repository Self-Hosted Runner Demo
on: 
  workflow_dispatch:
    inputs:
      job_type:
        description: 'Type of job to run'
        required: true
        default: 'build'
        type: choice
        options:
        - build
        - test
        - deploy
        - validation
      enable_debugging:
        description: 'Enable detailed debugging output'
        required: false
        default: false
        type: boolean
      skip_cleanup:
        description: 'Skip runner cleanup (for debugging)'
        required: false
        default: false
        type: boolean

jobs:
  start-runner:
    name: Start self-hosted EC2 runner
    runs-on: ubuntu-latest
    outputs:
      runner-name: ${{ steps.start.outputs.runner-name }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Start EC2 instance
        id: start-ec2
        run: |
          aws ec2 start-instances --instance-ids ${{ secrets.EC2_INSTANCE_ID }}
          aws ec2 wait instance-running --instance-ids ${{ secrets.EC2_INSTANCE_ID }}
          
          # Get instance IP
          INSTANCE_IP=$(aws ec2 describe-instances \
            --instance-ids ${{ secrets.EC2_INSTANCE_ID }} \
            --query 'Reservations[0].Instances[0].PublicIpAddress' \
            --output text)
          echo "instance-ip=$INSTANCE_IP" >> $GITHUB_OUTPUT

      - name: Generate registration token
        id: token
        run: |
          TOKEN=$(curl -s -X POST \
            -H "Authorization: token ${{ secrets.GH_PAT }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runners/registration-token" | \
            jq -r '.token')
          echo "registration-token=$TOKEN" >> $GITHUB_OUTPUT

      - name: Register runner with repository
        run: |
          # Wait for instance to be ready
          sleep 30
          
          # SSH and configure runner
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/runner-key ubuntu@${{ steps.start-ec2.outputs.instance-ip }} << 'EOF'
            cd ~/actions-runner
            
            # Remove existing configuration if present
            sudo ./svc.sh stop || true
            sudo ./svc.sh uninstall || true
            sudo -u ubuntu ./config.sh remove --token ${{ steps.token.outputs.registration-token }} || true
            
            # Configure new runner
            sudo -u ubuntu ./config.sh \
              --url https://github.com/${{ github.repository }} \
              --token ${{ steps.token.outputs.registration-token }} \
              --name ${{ secrets.RUNNER_NAME }} \
              --labels gha_aws_runner \
              --work _work \
              --unattended \
              --replace
            
            # Install and start service
            sudo ./svc.sh install ubuntu
            sudo ./svc.sh start
          EOF

      - name: Set runner name output
        id: start
        run: echo "runner-name=${{ secrets.RUNNER_NAME }}" >> $GITHUB_OUTPUT

  your-job:
    name: Run job on self-hosted runner
    needs: start-runner
    runs-on: [self-hosted, gha_aws_runner]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Show runner environment
        run: |
          echo "=== Runner Environment ==="
          echo "Runner name: ${{ needs.start-runner.outputs.runner-name }}"
          echo "Repository: ${{ github.repository }}"
          echo "Repository type: $(curl -s -H "Authorization: token ${{ secrets.GH_PAT }}" "https://api.github.com/repos/${{ github.repository }}" | jq -r 'if .private then "Private" else "Public" end')"
          echo "Workflow: ${{ github.workflow }}"
          echo "Job type: ${{ github.event.inputs.job_type }}"
          echo "Debug mode: ${{ github.event.inputs.enable_debugging }}"
          echo "Hostname: $(hostname)"
          echo "User: $(whoami)"
          echo "Working directory: $(pwd)"
          echo ""
          echo "=== System Information ==="
          uname -a
          echo "Uptime: $(uptime)"
          echo "Load average: $(cat /proc/loadavg)"
          echo ""
          echo "=== Resource Usage ==="
          echo "Memory usage:"
          free -h
          echo ""
          echo "Disk usage:"
          df -h
          echo ""
          echo "=== Available Tools ==="
          echo "Testing tool availability..."
          
          TOOLS=("docker" "aws" "python3" "java" "terraform" "kubectl" "helm" "git" "curl" "jq")
          for tool in "${TOOLS[@]}"; do
            if command -v "$tool" &> /dev/null; then
              case "$tool" in
                "docker")
                  if docker info > /dev/null 2>&1; then
                    echo "✅ $tool: $(docker --version) (daemon running)"
                  else
                    echo "⚠️  $tool: $(docker --version) (daemon not running)"
                  fi
                  ;;
                "aws")
                  echo "✅ $tool: $(aws --version 2>&1 | head -1)"
                  ;;
                "python3")
                  echo "✅ $tool: $(python3 --version)"
                  ;;
                "java")
                  echo "✅ $tool: $(java -version 2>&1 | head -1)"
                  ;;
                *)
                  echo "✅ $tool: Available"
                  ;;
              esac
            else
              echo "❌ $tool: Not available"
            fi
          done

      - name: Run job based on input
        run: |
          echo "=== Executing Job Type: ${{ github.event.inputs.job_type }} ==="
          
          case "${{ github.event.inputs.job_type }}" in
            "build")
              echo "Running build job demonstration..."
              
              # Simulate a build process
              echo "1. Setting up build environment..."
              mkdir -p build-output
              
              echo "2. Compiling source code..."
              # Create a simple test file
              cat > hello.py << 'EOF'
          print("Hello from repository runner!")
          print("Build completed successfully")
          EOF
              
              python3 hello.py > build-output/build.log
              
              echo "3. Running tests..."
              if [ -f "build-output/build.log" ]; then
                echo "✅ Build artifacts created"
                cat build-output/build.log
              else
                echo "❌ Build failed"
                exit 1
              fi
              
              echo "4. Build job completed successfully"
              ;;
              
            "test")
              echo "Running test job demonstration..."
              
              echo "1. Setting up test environment..."
              mkdir -p test-results
              
              echo "2. Running unit tests..."
              # Simulate test execution
              cat > test_runner.py << 'EOF'
          import sys
          import json
          
          # Simulate test results
          tests = [
              {"name": "test_basic_functionality", "status": "passed"},
              {"name": "test_error_handling", "status": "passed"},
              {"name": "test_performance", "status": "passed"},
              {"name": "test_integration", "status": "passed"}
          ]
          
          passed = sum(1 for test in tests if test["status"] == "passed")
          total = len(tests)
          
          print(f"Running {total} tests...")
          for test in tests:
              print(f"  {test['name']}: {test['status']}")
          
          print(f"\nTest Results: {passed}/{total} passed")
          
          # Save results
          with open("test-results/results.json", "w") as f:
              json.dump({"passed": passed, "total": total, "tests": tests}, f)
          
          if passed == total:
              print("✅ All tests passed!")
              sys.exit(0)
          else:
              print("❌ Some tests failed!")
              sys.exit(1)
          EOF
              
              python3 test_runner.py
              
              echo "3. Test job completed successfully"
              ;;
              
            "deploy")
              echo "Running deploy job demonstration..."
              
              echo "1. Preparing deployment..."
              mkdir -p deployment
              
              echo "2. Building deployment package..."
              # Create deployment manifest
              cat > deployment/manifest.yaml << 'EOF'
          apiVersion: v1
          kind: Deployment
          metadata:
            name: sample-app
          spec:
            replicas: 1
            template:
              spec:
                containers:
                - name: app
                  image: nginx:latest
                  ports:
                  - containerPort: 80
          EOF
              
              echo "3. Validating deployment configuration..."
              if [ -f "deployment/manifest.yaml" ]; then
                echo "✅ Deployment manifest created"
                echo "Manifest contents:"
                cat deployment/manifest.yaml
              else
                echo "❌ Deployment manifest creation failed"
                exit 1
              fi
              
              echo "4. Simulating deployment (dry-run)..."
              echo "   → Deployment would be applied to target environment"
              echo "   → Health checks would be performed"
              echo "   → Traffic would be gradually shifted"
              
              echo "5. Deploy job completed successfully"
              ;;
              
            "validation")
              echo "Running comprehensive validation..."
              
              echo "1. Environment validation..."
              echo "   Repository: ${{ github.repository }}"
              echo "   Runner: ${{ needs.start-runner.outputs.runner-name }}"
              echo "   Workflow: ${{ github.workflow }}"
              
              echo "2. Tool validation..."
              VALIDATION_PASSED=true
              
              # Test Docker
              if command -v docker &> /dev/null && docker info > /dev/null 2>&1; then
                echo "✅ Docker: Available and running"
                docker run --rm hello-world > /dev/null 2>&1 && echo "   Docker test: Passed" || echo "   Docker test: Failed"
              else
                echo "❌ Docker: Not available or not running"
                VALIDATION_PASSED=false
              fi
              
              # Test AWS CLI
              if command -v aws &> /dev/null; then
                echo "✅ AWS CLI: Available"
                if aws sts get-caller-identity > /dev/null 2>&1; then
                  echo "   AWS credentials: Valid"
                else
                  echo "   AWS credentials: Invalid or not configured"
                fi
              else
                echo "❌ AWS CLI: Not available"
                VALIDATION_PASSED=false
              fi
              
              # Test Python
              if command -v python3 &> /dev/null; then
                echo "✅ Python 3: $(python3 --version)"
                python3 -c "import json, sys; print('   JSON module: Available')" 2>/dev/null || echo "   JSON module: Failed"
              else
                echo "❌ Python 3: Not available"
                VALIDATION_PASSED=false
              fi
              
              echo "3. Network validation..."
              if curl -s https://api.github.com > /dev/null; then
                echo "✅ GitHub API: Accessible"
              else
                echo "❌ GitHub API: Not accessible"
                VALIDATION_PASSED=false
              fi
              
              echo "4. Repository validation..."
              REPO_INFO=$(curl -s -H "Authorization: token ${{ secrets.GH_PAT }}" "https://api.github.com/repos/${{ github.repository }}")
              if echo "$REPO_INFO" | jq -e '.id' > /dev/null; then
                echo "✅ Repository API: Accessible"
                REPO_PRIVATE=$(echo "$REPO_INFO" | jq -r '.private')
                echo "   Repository type: $(if [ "$REPO_PRIVATE" = "true" ]; then echo "Private"; else echo "Public"; fi)"
              else
                echo "❌ Repository API: Not accessible"
                VALIDATION_PASSED=false
              fi
              
              if [ "$VALIDATION_PASSED" = "true" ]; then
                echo "✅ Validation completed successfully"
              else
                echo "❌ Validation failed - check issues above"
                exit 1
              fi
              ;;
              
            *)
              echo "❌ Unknown job type: ${{ github.event.inputs.job_type }}"
              exit 1
              ;;
          esac

      - name: Debug information
        if: github.event.inputs.enable_debugging == 'true'
        run: |
          echo "=== Debug Information ==="
          echo "Environment variables:"
          env | grep -E "(GITHUB_|RUNNER_)" | sort
          echo ""
          echo "Process list:"
          ps aux | head -20
          echo ""
          echo "Network connections:"
          netstat -tuln | head -10
          echo ""
          echo "System logs (last 20 lines):"
          sudo tail -20 /var/log/syslog || echo "Could not read system logs"

  stop-runner:
    name: Stop self-hosted EC2 runner
    needs: [start-runner, your-job]
    runs-on: ubuntu-latest
    if: always() && github.event.inputs.skip_cleanup != 'true'
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Unregister runner from repository
        run: |
          # Get runner ID
          RUNNER_ID=$(curl -s \
            -H "Authorization: token ${{ secrets.GH_PAT }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runners" | \
            jq -r ".runners[] | select(.name==\"${{ secrets.RUNNER_NAME }}\") | .id")
          
          if [ "$RUNNER_ID" != "null" ] && [ -n "$RUNNER_ID" ]; then
            echo "Unregistering runner ID: $RUNNER_ID"
            curl -X DELETE \
              -H "Authorization: token ${{ secrets.GH_PAT }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/actions/runners/$RUNNER_ID"
          else
            echo "Runner not found or already unregistered"
          fi

      - name: Stop EC2 instance
        run: |
          aws ec2 stop-instances --instance-ids ${{ secrets.EC2_INSTANCE_ID }}
          echo "EC2 instance stopped: ${{ secrets.EC2_INSTANCE_ID }}"