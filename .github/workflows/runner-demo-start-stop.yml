name: runner-demo-start-stop
on: 
  workflow_dispatch:
    inputs:
      instance_id:
        description: 'EC2 Instance ID of existing runner'
        required: true
        type: string
      runner_name:
        description: 'Name of the runner (e.g., runner-username-repo)'
        required: true
        type: string

jobs:
  start-runner:
    name: Start EC2 Runner
    runs-on: ubuntu-latest
    outputs:
      was-running: ${{ steps.check.outputs.was-running }}
      public-ip: ${{ steps.start.outputs.public-ip }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
          
      - name: Check instance status
        id: check
        run: |
          echo "Checking status of instance: ${{ inputs.instance_id }}"
          
          STATUS=$(aws ec2 describe-instances \
            --instance-ids ${{ inputs.instance_id }} \
            --query 'Reservations[0].Instances[0].State.Name' \
            --output text)
          
          echo "Current status: $STATUS"
          
          if [ "$STATUS" = "running" ]; then
            echo "‚úÖ Instance already running"
            echo "was-running=true" >> $GITHUB_OUTPUT
          else
            echo "üîÑ Instance needs to be started (status: $STATUS)"
            echo "was-running=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Start instance if needed
        id: start
        run: |
          if [ "${{ steps.check.outputs.was-running }}" = "false" ]; then
            echo "Starting instance: ${{ inputs.instance_id }}"
            aws ec2 start-instances --instance-ids ${{ inputs.instance_id }}
            
            echo "Waiting for instance to be running..."
            aws ec2 wait instance-running --instance-ids ${{ inputs.instance_id }}
            
            echo "‚úÖ Instance started successfully"
          else
            echo "Instance already running, no action needed"
          fi
          
          # Get public IP
          PUBLIC_IP=$(aws ec2 describe-instances \
            --instance-ids ${{ inputs.instance_id }} \
            --query 'Reservations[0].Instances[0].PublicIpAddress' \
            --output text)
          
          echo "Public IP: $PUBLIC_IP"
          echo "public-ip=$PUBLIC_IP" >> $GITHUB_OUTPUT
          
      - name: Wait for runner to be ready
        run: |
          echo "Waiting for GitHub Actions runner to be online..."
          
          # Wait up to 5 minutes for runner to be online
          for i in {1..30}; do
            RUNNER_STATUS=$(curl -s -H "Authorization: token ${{ secrets.GH_PAT }}" \
              "https://api.github.com/repos/${{ github.repository }}/actions/runners" | \
              jq -r '.runners[] | select(.name == "${{ inputs.runner_name }}") | .status')
            
            if [ "$RUNNER_STATUS" = "online" ]; then
              echo "‚úÖ Runner is online and ready!"
              break
            else
              echo "Runner status: $RUNNER_STATUS (attempt $i/30)"
              sleep 10
            fi
          done
          
  test-runner:
    name: Execute Jobs on Runner
    runs-on: [self-hosted, gha_aws_runner]
    needs: start-runner
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Show runner information
        run: |
          echo "üöÄ Executing on existing self-hosted runner!"
          echo "Instance ID: ${{ inputs.instance_id }}"
          echo "Runner Name: ${{ inputs.runner_name }}"
          echo "Public IP: ${{ needs.start-runner.outputs.public-ip }}"
          echo "Was already running: ${{ needs.start-runner.outputs.was-running }}"
          echo ""
          echo "=== Quick System Check ==="
          echo "Hostname: $(hostname)"
          echo "Uptime: $(uptime)"
          echo "Disk usage: $(df -h / | tail -1 | awk '{print $5}')"
          echo "Load average: $(cat /proc/loadavg)"
          
      - name: Run sample workload
        run: |
          echo "=== Running Sample Workload ==="
          
          # Test Docker
          echo "Testing Docker..."
          docker run --rm alpine:latest echo "Docker test successful"
          
          # Test AWS CLI
          echo "Testing AWS CLI..."
          aws sts get-caller-identity --output table
          
          # Test Python
          echo "Testing Python..."
          python3 -c "import sys; print(f'Python {sys.version}')"
          
          # Test Node.js
          echo "Testing Node.js..."
          node -e "console.log('Node.js', process.version)"
          
          echo "‚úÖ All tests completed successfully!"
          
  stop-runner:
    name: Stop EC2 Runner
    runs-on: ubuntu-latest
    needs: [start-runner, test-runner]
    if: always()
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
          
      - name: Stop instance
        run: |
          echo "Stopping instance: ${{ inputs.instance_id }}"
          
          # Only stop if we started it (don't stop if it was already running)
          if [ "${{ needs.start-runner.outputs.was-running }}" = "false" ]; then
            aws ec2 stop-instances --instance-ids ${{ inputs.instance_id }}
            
            echo "Waiting for instance to stop..."
            aws ec2 wait instance-stopped --instance-ids ${{ inputs.instance_id }}
            
            echo "‚úÖ Instance stopped successfully"
            echo "üí∞ Cost optimization: Instance stopped to save costs"
          else
            echo "‚ÑπÔ∏è  Instance was already running before workflow started"
            echo "‚ÑπÔ∏è  Leaving instance running (not stopping)"
          fi
          
      - name: Summary
        run: |
          echo "=== Workflow Summary ==="
          echo "Instance ID: ${{ inputs.instance_id }}"
          echo "Runner Name: ${{ inputs.runner_name }}"
          echo "Was running at start: ${{ needs.start-runner.outputs.was-running }}"
          echo "Final action: $([ '${{ needs.start-runner.outputs.was-running }}' = 'false' ] && echo 'Stopped instance' || echo 'Left running')"
          echo ""
          echo "‚úÖ Start/Stop workflow completed successfully!"