name: Simple Runner Test

# Simple workflow that automatically works with any repository
# Demonstrates basic runner functionality with minimal configuration

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]
    paths:
      - '.github/workflows/simple-runner-test.yml'
  pull_request:
    branches: [ main, master ]

env:
  RUNNER_NAME: ${{ secrets.RUNNER_NAME || 'gha_aws_runner' }}

jobs:
  # Quick validation that doesn't require runner
  validate-config:
    name: Validate Configuration
    runs-on: ubuntu-latest
    outputs:
      can-use-runner: ${{ steps.check.outputs.ready }}
      repository-info: ${{ steps.info.outputs.data }}
    steps:
      - name: Check if runner can be used
        id: check
        run: |
          echo "=== Configuration Check ==="
          echo "Repository: ${{ github.repository }}"
          echo "Event: ${{ github.event_name }}"
          
          # Check if required secrets exist
          READY=false
          
          if [ -n "${{ secrets.GH_PAT }}" ] && [ -n "${{ secrets.EC2_INSTANCE_ID }}" ]; then
            echo "✅ Required secrets are configured"
            READY=true
          else
            echo "⚠️  Required secrets missing:"
            [ -z "${{ secrets.GH_PAT }}" ] && echo "  - GH_PAT"
            [ -z "${{ secrets.EC2_INSTANCE_ID }}" ] && echo "  - EC2_INSTANCE_ID"
            echo ""
            echo "To use self-hosted runner, configure these secrets:"
            echo "1. Go to Settings → Secrets and variables → Actions"
            echo "2. Add required secrets (see README for details)"
            echo ""
            echo "This workflow will use GitHub-hosted runner instead."
          fi
          
          echo "ready=$READY" >> $GITHUB_OUTPUT

      - name: Get repository information
        id: info
        run: |
          echo "=== Repository Information ==="
          
          # Get basic repository info
          REPO_OWNER="${{ github.repository_owner }}"
          REPO_NAME="${{ github.event.repository.name }}"
          
          echo "Owner: $REPO_OWNER"
          echo "Name: $REPO_NAME"
          echo "Default branch: ${{ github.event.repository.default_branch }}"
          
          # Create info JSON
          INFO=$(jq -n \
            --arg owner "$REPO_OWNER" \
            --arg name "$REPO_NAME" \
            --arg full_name "${{ github.repository }}" \
            '{owner: $owner, name: $name, full_name: $full_name}')
          
          echo "data=$INFO" >> $GITHUB_OUTPUT

  # Test on GitHub-hosted runner (always available)
  test-github-hosted:
    name: Test on GitHub-hosted Runner
    runs-on: ubuntu-latest
    needs: validate-config
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run basic tests
        run: |
          echo "=== GitHub-hosted Runner Test ==="
          echo "Repository: ${{ github.repository }}"
          echo "Runner: GitHub-hosted (ubuntu-latest)"
          echo "Event: ${{ github.event_name }}"
          echo ""
          
          echo "=== Basic Environment ==="
          echo "OS: $(uname -s)"
          echo "Architecture: $(uname -m)"
          echo "Kernel: $(uname -r)"
          echo "User: $(whoami)"
          echo "Home: $HOME"
          echo "PWD: $(pwd)"
          echo ""
          
          echo "=== Available Tools ==="
          echo "Git: $(git --version)"
          echo "Node.js: $(node --version 2>/dev/null || echo 'Not available')"
          echo "Python: $(python3 --version 2>/dev/null || echo 'Not available')"
          echo "Docker: $(docker --version 2>/dev/null || echo 'Not available')"
          echo ""
          
          echo "=== Repository Content ==="
          if [ -f "README.md" ]; then
            echo "✅ README.md found"
            echo "Size: $(wc -l < README.md) lines"
          else
            echo "⚠️  No README.md found"
          fi
          
          if [ -d ".github/workflows" ]; then
            echo "✅ GitHub Actions workflows found:"
            ls -la .github/workflows/
          else
            echo "⚠️  No workflows directory found"
          fi
          
          echo ""
          echo "✅ GitHub-hosted runner test completed"

  # Test on self-hosted runner (if available)
  test-self-hosted:
    name: Test on Self-hosted Runner
    runs-on: [self-hosted, gha_aws_runner]
    needs: validate-config
    if: needs.validate-config.outputs.can-use-runner == 'true'
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run self-hosted runner tests
        run: |
          echo "=== Self-hosted Runner Test ==="
          echo "Repository: ${{ github.repository }}"
          echo "Runner: Self-hosted (${{ env.RUNNER_NAME }})"
          echo "Event: ${{ github.event_name }}"
          echo ""
          
          echo "=== Runner Environment ==="
          echo "Hostname: $(hostname)"
          echo "OS: $(uname -s)"
          echo "Architecture: $(uname -m)"
          echo "Kernel: $(uname -r)"
          echo "User: $(whoami)"
          echo "Home: $HOME"
          echo "PWD: $(pwd)"
          echo ""
          
          echo "=== System Resources ==="
          echo "CPU cores: $(nproc)"
          echo "Memory:"
          free -h
          echo ""
          echo "Disk space:"
          df -h /
          echo ""
          
          echo "=== Installed Tools ==="
          TOOLS=("git" "docker" "aws" "python3" "java" "terraform" "kubectl" "helm")
          
          for tool in "${TOOLS[@]}"; do
            if command -v "$tool" &> /dev/null; then
              case "$tool" in
                "git")
                  echo "✅ $tool: $(git --version)"
                  ;;
                "docker")
                  if docker info > /dev/null 2>&1; then
                    echo "✅ $tool: $(docker --version) (running)"
                  else
                    echo "⚠️  $tool: $(docker --version) (not running)"
                  fi
                  ;;
                "aws")
                  echo "✅ $tool: $(aws --version 2>&1 | head -1)"
                  ;;
                "python3")
                  echo "✅ $tool: $(python3 --version)"
                  ;;
                "java")
                  echo "✅ $tool: $(java -version 2>&1 | head -1)"
                  ;;
                *)
                  echo "✅ $tool: Available"
                  ;;
              esac
            else
              echo "❌ $tool: Not available"
            fi
          done
          
          echo ""
          echo "=== Repository Content Test ==="
          if [ -f "README.md" ]; then
            echo "✅ README.md found"
            echo "First 5 lines:"
            head -5 README.md
          else
            echo "⚠️  No README.md found"
          fi
          
          echo ""
          echo "=== Performance Test ==="
          echo "Running simple performance test..."
          
          # CPU test
          echo "CPU test (calculating pi):"
          time python3 -c "
          import math
          import time
          start = time.time()
          pi = 4 * sum((-1)**i / (2*i + 1) for i in range(100000))
          end = time.time()
          print(f'Calculated pi: {pi:.6f}')
          print(f'Time taken: {end - start:.3f} seconds')
          "
          
          echo ""
          echo "✅ Self-hosted runner test completed"

      - name: Test Docker functionality
        if: success()
        run: |
          echo "=== Docker Functionality Test ==="
          
          if command -v docker &> /dev/null && docker info > /dev/null 2>&1; then
            echo "Testing Docker with hello-world image..."
            
            # Pull and run hello-world
            if docker run --rm hello-world; then
              echo "✅ Docker test: Passed"
            else
              echo "❌ Docker test: Failed"
            fi
            
            # Test custom container
            echo ""
            echo "Testing custom container..."
            docker run --rm alpine:latest echo "Hello from Alpine Linux on self-hosted runner!"
            
            echo ""
            echo "Docker images:"
            docker images --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}"
          else
            echo "⚠️  Docker not available or not running"
          fi

  # Summary job
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [validate-config, test-github-hosted, test-self-hosted]
    if: always()
    steps:
      - name: Generate test summary
        run: |
          echo "=== Simple Runner Test Summary ==="
          echo "Repository: ${{ github.repository }}"
          echo "Event: ${{ github.event_name }}"
          echo "Timestamp: $(date)"
          echo ""
          
          # Check job results
          VALIDATION_RESULT="${{ needs.validate-config.result }}"
          GITHUB_HOSTED_RESULT="${{ needs.test-github-hosted.result }}"
          SELF_HOSTED_RESULT="${{ needs.test-self-hosted.result }}"
          
          echo "=== Job Results ==="
          echo "Configuration validation: $VALIDATION_RESULT"
          echo "GitHub-hosted test: $GITHUB_HOSTED_RESULT"
          echo "Self-hosted test: $SELF_HOSTED_RESULT"
          echo ""
          
          # Determine runner availability
          CAN_USE_RUNNER="${{ needs.validate-config.outputs.can-use-runner }}"
          
          if [ "$CAN_USE_RUNNER" = "true" ]; then
            echo "=== Runner Status ==="
            echo "✅ Self-hosted runner: Available"
            
            if [ "$SELF_HOSTED_RESULT" = "success" ]; then
              echo "✅ Self-hosted runner test: Passed"
            elif [ "$SELF_HOSTED_RESULT" = "failure" ]; then
              echo "❌ Self-hosted runner test: Failed"
            elif [ "$SELF_HOSTED_RESULT" = "skipped" ]; then
              echo "⚠️  Self-hosted runner test: Skipped"
            else
              echo "⚠️  Self-hosted runner test: $SELF_HOSTED_RESULT"
            fi
          else
            echo "=== Runner Status ==="
            echo "⚠️  Self-hosted runner: Not configured"
            echo "Using GitHub-hosted runner instead"
          fi
          
          echo ""
          echo "=== Overall Result ==="
          
          if [ "$GITHUB_HOSTED_RESULT" = "success" ]; then
            if [ "$CAN_USE_RUNNER" = "true" ] && [ "$SELF_HOSTED_RESULT" = "success" ]; then
              echo "🎉 SUCCESS: Both GitHub-hosted and self-hosted runners working"
            elif [ "$CAN_USE_RUNNER" = "true" ]; then
              echo "⚠️  PARTIAL: GitHub-hosted working, self-hosted needs attention"
            else
              echo "✅ SUCCESS: GitHub-hosted runner working (self-hosted not configured)"
            fi
          else
            echo "❌ FAILURE: GitHub-hosted runner test failed"
          fi
          
          echo ""
          echo "=== Next Steps ==="
          
          if [ "$CAN_USE_RUNNER" != "true" ]; then
            echo "To enable self-hosted runner:"
            echo "1. Configure required repository secrets"
            echo "2. Deploy AWS infrastructure using Terraform"
            echo "3. Run the 'Configure Repository Runner' workflow"
            echo "4. Test with this workflow again"
          elif [ "$SELF_HOSTED_RESULT" != "success" ]; then
            echo "To fix self-hosted runner issues:"
            echo "1. Check runner status in Settings → Actions → Runners"
            echo "2. Verify EC2 instance is running"
            echo "3. Run troubleshooting workflows"
            echo "4. Check the troubleshooting guide in docs/"
          else
            echo "✅ Everything is working correctly!"
            echo "You can now use both GitHub-hosted and self-hosted runners"
          fi